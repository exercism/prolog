match(Piezes, [(A,B)|T], [New,(A,B)|T], NewPiezes) :-
  member((X,A), Piezes) -> New = (X,A), selectchk((X,A), Piezes, NewPiezes) ;
  member((A,X), Piezes) -> New = (X,A), selectchk((A,X), Piezes, NewPiezes).

solve_([], Chain, Chain).
solve_(Piezes, Chain, RC) :-
  match(Piezes, Chain, NC, NP),
  solve_(NP, NC, RC).

solve([], []).
solve(Piezes, Chain) :-
  member((A,B), Piezes),
  select((A,B), Piezes, NP), 
  (solve_(NP, [(B,A)], Chain) ; solve_(NP, [(A,B)], Chain)),
  last(Chain, (_, E)), Chain = [(E, _)|_].

can_chain([]) :- !.
can_chain(XS) :- solve(XS, _), !.
